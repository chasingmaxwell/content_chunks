<?php

/**
 * @file
 * Allow content to be edited in structured and reusable chunks.
 *
 * @TODO:
 *   - When you interact with the image widget it doesn't set the current chunk
 *     to active.
 *   - Make chunks work with only 1 value (even though that's weird).
 */

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'chunks') . '/chunks.field.inc';

/**
 * Implements hook_menu().
 */
function chunks_menu() {
  $items = array();

  // Create menu items for all possible bundles.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      foreach($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];
          // Different bundles can appear on the same path (e.g. %node_type and
          // %comment_node_type). To allow field_ui_menu_load() to extract the
          // actual bundle object from the translated menu router path
          // arguments, we need to identify the argument position of the bundle
          // name string ('bundle argument') and pass that position to the menu
          // loader. The position needs to be casted into a string; otherwise it
          // would be replaced with the bundle name string.
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'];
            $bundle_pos = (string) $bundle_arg;
          }
          else {
            $bundle_arg = $bundle_name;
            $bundle_pos = '0';
          }
          // This is the position of the %field_ui_menu placeholder in the
          // items below.
          $previous = count(explode('/', $path));
          $field_position = $previous + 1;
          $instance_position = $previous + 3;

          // Extract access information, providing defaults.
          $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
          $access += array(
            'access callback' => 'user_access',
            'access arguments' => array('administer site configuration'),
          );

          // @TODO: This path is pretty long which can cause trouble if it
          // exceeds MENU_MAX_PARTS. Consider another path that isn't appended
          // onto the field instance edit path.
          $items["$path/fields/%field_ui_menu/chunk_instance_remove/%"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => 'Remove chunk instance',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('chunks_chunk_instance_remove_form', $field_position, $instance_position),
            'file' => 'chunks.field.inc',
          ) + $access;
        }
      }
    }
  }

  return $items;
}

/**
 * Validate and load all chunk types defined by hook_chunk_types().
 *
 * @return
 *   An associative array of ChunkType objects keyed by the ChunkType's
 *   machine-readable name.
 */
function chunk_types_load() {
  $chunk_types = &drupal_static(__FUNCTION__);
  if (!isset($chunk_types)) {
    $modules = module_implements('chunk_types');
    $chunk_types = array();
    foreach ($modules as $module) {
      $function = $module . '_chunk_types';
      $module_chunk_types = $function();

      // Validate each chunk type. If they are valid, register them.
      foreach ($module_chunk_types as $name => $data) {

        // Check for multiple chunk types of the same name. If there are
        // duplicates, whichever chunk type is registered last will override
        // those that came before it. Since this is not necessarily an error and
        // could be intended functionality, we don't prevent this chunk type
        // from being registered, we just log it in watchdog.
        if (isset($chunk_types[$name])) {
          $message = 'The %type chunk type was provided by the %first_module module but has been overridden by the %second_module module which provided a chunk type of the same name.';
          $variables = array('%type' => $name, '%first_module' => $chunk_types[$name]->module, '%second_module' => $module);
          watchdog('chunks', $message, $variables, WATCHDOG_WARNING);
        }

        // Check if required properties are present.
        // @TODO: Make it possible for chunk types to be created without any
        // configuration. In this case the widget should be altered to go
        // straight from the type selection view to the preview view.
        if (!isset($data['title']) || !isset($data['default configuration'])) {
          $message = 'The %type chunk type is not properly defined in %module_chunk_types(). It must contain both a title and a default configuration.';
          $variables = array('%type' => $name, '%module' => $module);
          watchdog('chunks', $message, $variables, WATCHDOG_ERROR);
          // Do not register this chunk type.
          continue;
        }

        // Populate defaults for optional variables if they are not set.
        if (!isset($data['default type settings'])) {
          $data['default type settings'] = array();
        }

        if (isset($data['file'])) {

          if (!isset($data['file path'])) {
            $data['file path'] = drupal_get_path('module', $module);
          }

          // Check if the file exists.
          if (!file_exists(DRUPAL_ROOT . '/' . $data['file path'] . '/' . $data['file'])) {
            $message = 'The %module module does not provide the %file file. The %type chunk type will not be available.';
            $variables = array('%module' => $module, '%file' => $data['file'], '%type' => $name);
            watchdog('chunks', $message, $variables, WATCHDOG_ERROR);
            // Do not register this chunk type.
            continue;
          }
        }

        if (!isset($data['template path'])) {
          $data['template path'] = drupal_get_path('module', $module);
        }
        if (!isset($data['template'])) {
          $data['template'] = 'chunk--' . str_replace('_', '-', $name);
        }

        if (!isset($data['client themeable']) || $data['client themeable'] !== TRUE) {
          $data['client themeable'] = FALSE;
        }

        // Check if the template file exists.
        if (!file_exists(DRUPAL_ROOT . '/' . $data['template path'] . '/' . $data['template'] . '.tpl.php')) {
          $message = 'The %module module did not provide a properly named template file (suggestion: "%suggestion") for the %type chunk type. The %type chunk type will not be available.';
          $variables = array('%module' => $module, '%type' => $name, '%suggestion' => $data['template path'] . '/' . $data['template'] . '.tpl.php');
          watchdog('chunks', $message, $variables, WATCHDOG_ERROR);
          // Do not register this chunk type.
          continue;
        }

        // Create new ChunkType so we can continue validation.
        $chunk_type = new ChunkType($name, $data, $module);

        if (isset($data['file'])) {
          $chunk_type->file_include();
        }

        // Check if the configuration form exists.
        if (!function_exists($module . '_' . $name . '_chunk_form')) {
          $message = 'The %module module does not provide a configuration form for the %name chunk type.';
          $variables = array('%module' => $module, '%name' => $name);
          watchdog('chunks', $message, $variables, WATCHDOG_ERROR);
          // Do not register this chunk type.
          continue;
        }

        // This chunk type is valid, register it.
        $chunk_types[$name] = $chunk_type;
      }
    }
  }
  return $chunk_types;
}

/**
 * Implements hook_permission().
 */
function chunks_permission() {
  $permissions = array();
  $chunk_types = chunk_types_load();
  foreach ($chunk_types as $chunk_type) {
    $permissions['use_' . $chunk_type->name . '_chunk'] = array(
      'title' => t('Use the %chunk_type chunk type.', array('%chunk_type' => $chunk_type->name)),
    );
  }
  return $permissions;
}

/**
 * Retrieve all entities containing a chunk of a given type.
 *
 * @param $type
 *   The chunk type's machine name string.
 * @param $fields
 *   An optional array of fields in which to search, keyed by field_name. Should
 *   match the output of field_read_fields().
 *
 * @return
 *   An array of entity id's keyed by id or FALSE if none were found.
 */
function chunks_entities_containing_chunks_of_type($type, $fields = array()) {

  // Don't do anything if we received improper input.
  if (!is_string($type) || !is_array($fields)) {
    return FALSE;
  }

  $entities = array();

  $chunk_types = chunk_types_load();

  // Ensure that the type exists.
  if (!isset($chunk_types[$type])) {
    return FALSE;
  }

  if (empty($fields)) {
    // Retrieve all chunks fields.
    $fields = field_read_fields(array('type' => 'chunks'));
  }

  // For each field, query the field_data_FIELD_NAME table for entities
  // containing a chunk of the given type.
  foreach ($fields as $name => $field) {

    // Make sure we don't query non-chunks fields.
    if (!isset($field['type']) || $field['type'] !== 'chunks') {
      $message = 'The %name field is being queried for entities containing chunks of a given type, but is not a chunks field.';
      $variables = array('%name' => $name);
      watchdog('chunks', $message, $variables, WATCHDOG_WARNING);
      continue;
    }

    // Retrieve the entity id's.
    $result = db_select('field_data_' . $name, 'd')
      ->fields('d', array('entity_id'))
      ->condition($name . '_type', $type)
      ->distinct()
      ->execute();
    while ($record = $result->fetchField()) {
      $entities[$record] = $record;
    }
  }

  // Return array of entity id's or FALSE if none were found.
  return !empty($entities) ? $entities : FALSE;
}

/**
 * Retrieve all entities and field item deltas corresponding to chunks of a
 * given instance.
 *
 * @param $chunk_instance
 *   The chunk instance's machine name string.
 * @param $field_instance
 *   The field instance in which to search. Should match the output of
 *   field_read_instance().
 *
 * @return
 *   An array of deltas keyed by entity id or FALSE if none were found.
 */
function chunks_entities_containing_chunks_of_instance($chunk_instance, $field_instance) {

  // Don't do anything if we received improper input.
  if (!is_string($chunk_instance) || !is_array($field_instance)) {
    return FALSE;
  }

  $field = field_info_field($field_instance['field_name']);

  $entities = array();

  // Make sure we don't query non-chunks fields.
  if (!isset($field['type']) || $field['type'] !== 'chunks') {
    $message = 'The %name field is being queried for entities containing chunks of a given type, but is not a chunks field.';
    $variables = array('%name' => $field['field_name']);
    watchdog('chunks', $message, $variables, WATCHDOG_WARNING);
    return FALSE;
  }

  // Retrieve the entity id's and deltas.
  $result = db_select('field_data_' . $field['field_name'], 'd')
    ->fields('d', array('entity_id', 'delta'))
    ->condition($field['field_name'] . '_instance', $chunk_instance)
    ->condition('bundle', $field_instance['bundle'])
    ->execute();
  while ($record = $result->fetchAssoc()) {
    $entities[$record['entity_id']][] = $record['delta'];
  }

  // Return array of entity id's or FALSE if none were found.
  return !empty($entities) ? $entities : FALSE;
}

/**
 * Check whether there are field instance settings that depend on a given chunk
 * type.
 *
 * @param $type
 *   The chunk type's machine name string.
 * @param $fields
 *   An optional array of fields in which to search, keyed by field_name. Should
 *   match the output of field_read_fields().
 *
 * @return
 *   TRUE if data was found and FALSE otherwise.
 */
function chunks_type_in_use($type, $fields = array()) {

  // Don't do anything if we received improper input.
  if (!is_string($type) || !is_array($fields)) {
    return FALSE;
  }

  $chunk_types = chunk_types_load();

  // Ensure that the type exists.
  if (!isset($chunk_types[$type])) {
    return FALSE;
  }

  if (empty($fields)) {
    // Retrieve all chunks fields.
    $fields = field_read_fields(array('type' => 'chunks'));
  }

  // For each field, query the field_data_FIELD_NAME table for at least one
  // entity containing a chunk of the given type.
  foreach ($fields as $name => $field) {

    // Make sure we don't query non-chunks fields.
    if (!isset($field['type']) || $field['type'] !== 'chunks') {
      $message = 'The %name field is being queried for entities containing chunks of a given type, but is not a chunks field.';
      $variables = array('%name' => $name);
      watchdog('chunks', $message, $variables, WATCHDOG_WARNING);
      continue;
    }

    $instances = field_read_instances(array('field_name' => $field['field_name']));
    foreach ($instances as $instance) {
      foreach($instance['settings']['chunk_instances'] as $chunk_instance) {
        if ($chunk_instance['type'] == $type) {
          // We have chunk instances!
          return TRUE;
        }
      }
    }
  }

  // No field data was found for this chunk type.
  return FALSE;
}

/**
 * Check whether there is field data for a given chunk instance.
 *
 * @param $chunk_instance
 *   The chunk instance's machine name string.
 * @param $field_instance
 *   The field instance in which to search. Should match the output of
 *   field_read_instance().
 *
 * @return
 *   TRUE if data was found and FALSE otherwise.
 */
function chunks_instance_in_use($chunk_instance, $field_instance) {

  // Don't do anything if we received improper input.
  if (!is_string($chunk_instance) || !is_array($field_instance)) {
    return FALSE;
  }

  $field = field_info_field($field_instance['field_name']);

  // Make sure we don't query non-chunks fields.
  if (!isset($field['type']) || $field['type'] !== 'chunks') {
    $message = 'The %name field is being queried for entities containing chunks of a given instance, but is not a chunks field.';
    $variables = array('%name' => $field['name']);
    watchdog('chunks', $message, $variables, WATCHDOG_WARNING);
    return FALSE;
  }

  // Query the field_data_FIELD_NAME table for at least one
  // entity containing a chunk of the given instance.
  $result = db_select('field_data_' . $field['field_name'], 'd')
    ->fields('d', array('entity_id'))
    ->condition($field['field_name'] . '_instance', $chunk_instance)
    ->condition('bundle', $field_instance['bundle'])
    ->range(0,1)
    ->execute();
  while ($record = $result->fetchField()) {
    // We have data!
    return TRUE;
  }

  // No field data was found for this chunk instance.
  return FALSE;
}

/**
 * Implements hook_system_info_alter().
 *
 * Prevent modules from being disabled when they provide chunk types currently
 * in use.
 */
function chunks_system_info_alter(&$info, $file, $type) {
  if ($type == 'module' && module_hook($file->name, 'chunk_types')) {
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'chunks') . '/chunk_type/chunk_type.inc';

    $function = $file->name . '_chunk_types';
    $chunk_types_info = $function();
    foreach (array_keys($chunk_types_info) as $type) {
      if (chunks_type_in_use($type)) {
        $info['required'] = TRUE;
        $types_in_use[$type] = $type;
      }
    }
    if (!empty($info['required'])) {
      if (count($types_in_use) > 1) {
        $last_type = array_pop($types_in_use);
        $types_in_use = implode(', ', $types_in_use) . ' and ' . $last_type;
        $info['explanation'] = t('The %types chunk types are still in use. There are chunk instances which are dependent upon them.', array('%types' => $types_in_use));
      }
      else {
        $info['explanation'] = t('The %type chunk type is still in use. There are chunk instances which are dependent upon it.', array('%type' => current($types_in_use)));
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function chunks_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    // This base theme hook should never actually make it to the chunk.tpl.php
    // template as it merely serves as a base for each chunk type's more
    // specific theme hook.
    'chunk' => array(
      'render element' => 'chunk',
      'template' => 'chunk',
    ),
    'chunks_instances_form' => array(
      'render element' => 'element',
      'file' => 'chunks.field.inc',
    ),
    'chunks_field_widget_form' => array(
      'render element' => 'element',
      'file' => 'chunks.field.inc',
    ),
  );

  // Load all chunk types and register corresponding theme hooks.
  $chunk_types = chunk_types_load();
  foreach ($chunk_types as $chunk_type) {

    // Build the chunk type's theme hook.
    $hook =  array(
      'render element' => 'chunk',
      'template' => $chunk_type->template,
      'path' => $chunk_type->template_path,
    );

    // Register the chunk type's theme hook.
    $theme_hooks['chunk__' . $chunk_type->name] = $hook;
  }

  return $theme_hooks;
}

/**
 * Preprocess variables for the theme_chunk().
 */
function template_preprocess_chunk(&$variables, $hook) {
  // Add class with type name.
  $variables['classes_array'][] = $variables['chunk']['#chunk_type']->name . '-chunk';

  // Provide some intuitive top-level variables.
  $variables['chunk_type'] = $variables['chunk']['#chunk_type'];
  $variables['configuration'] = $variables['chunk']['#chunk_configuration'];
  $variables['instance_settings'] = $variables['chunk']['#instance_settings'];
  $variables['field_name'] = $variables['chunk']['#field_name'];
  $variables['langcode'] = $variables['chunk']['#langcode'];
  $variables['delta'] = $variables['chunk']['#delta'];
  $variables['preview'] = $variables['chunk']['#preview'];
  $variables['entity'] = $variables['chunk']['#entity'];
  $variables['entity_type'] = $variables['chunk']['#entity_type'];

  // Add theme hook suggestions.
  $variables['theme_hook_suggestions'][] = 'chunk';
  $variables['theme_hook_suggestions'][] = 'chunk__' . $variables['chunk']['#chunk_type']->name;
}
