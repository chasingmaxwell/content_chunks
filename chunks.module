<?php

/**
 * @file
 * Allow content to be edited in structured and reusable chunks.
 */
module_load_include('inc', 'chunks', 'chunks.field');
module_load_include('inc', 'chunks', 'chunks.chunk_types');

/**
 * Load all chunk types defined by hook_chunk_types().
 */
function chunk_types_load() {
  $modules = module_implements('chunk_types');
  $chunk_types = array();
  foreach ($modules as $module) {
    $function = $module . '_chunk_types';
    $module_chunk_types = $function();
    foreach ($module_chunk_types as $name => $title) {
      // @TODO: Add a check here to see if a chunk type of the same name already
      // exists. If so, we should log it in watchdog.
      $chunk_types[$name] = new ChunkType($name, $title, $module);
    }
  }
  return $chunk_types;
}

/**
 * Implements hook_theme().
 */
function chunks_theme($existing, $type, $theme, $path) {
  // @TODO: use chunk_types_load() to register theme implementations for all
  // chunks from one place.
  return array(
    'chunk' => array(
      'render element' => 'chunk',
    ),
    'chunks_text_chunk' => array(
      'variables' => array(
        'text' => '',
      ),
      'file' => 'chunks.chunk_types.inc',
    ),
  );
}

/**
 * Preprocess variables for the theme_chunk().
 */
function template_preprocess_chunk($variables) {
  // Add some chunk classes to the classes_array.
  $classes = array('chunk', $variables['chunk']['chunk_type']->name . '-chunk');
  $variables['classes_array'] = array_merge($variables['classes_array'], $classes);
}

/**
 * Theme implementation for a single chunk.
 */
function theme_chunk($variables) {
  $output = '<div class="' . implode($variables['classes_array']) . '">';
  $output .= $variables['chunk']['#chunk_content'];
  $output .= '</div>';
  return $output;
}

