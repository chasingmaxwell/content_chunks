<?php

/**
 * @file
 * Allow content to be edited in structured and reusable chunks.
 */

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'chunks') . '/chunks.field.inc';

/**
 * Load all chunk types defined by hook_chunk_types().
 */
function chunk_types_load() {
  // @TODO: Cache the output of this function so we can save time when it's run
  // multiple times.
  $modules = module_implements('chunk_types');
  $chunk_types = array();
  foreach ($modules as $module) {
    $function = $module . '_chunk_types';
    $module_chunk_types = $function();
    foreach ($module_chunk_types as $name => $data) {
      // @TODO:
      //  - Add a check here to see if a chunk type of the same name already
      //    exists. If so, we should log it in watchdog.
      //  - Make sure $data contains what it should and log it in watchdog if it
      //    does not.
      //  - Make sure the MODULE_NAME.chunk_types.inc file exists and log it if
      //    it doesn't.

      $chunk_types[$name] = new ChunkType($name, $data, $module);
    }
  }
  return $chunk_types;
}

/**
 * Implements hook_permission().
 */
function chunks_permission() {
  $permissions = array();
  $chunk_types = chunk_types_load();
  foreach ($chunk_types as $chunk_type) {
    $permissions['use_' . $chunk_type->name . '_chunk'] = array(
      'title' => t('Use the %chunk_type chunk type.', array('%chunk_type' => $chunk_type->name)),
    );
  }
  return $permissions;
}

/**
 * Implements hook_chunk_types() to provide a simple text chunk.
 */
function chunks_chunk_types() {
  return array(
    'text' => array(
      'title' => t('Text'),
      'default_configuration' => array(
        'text' => '',
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function chunks_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'chunk' => array(
      'render element' => 'chunk',
    ),
    'chunks_field_widget_form' => array(
      'render element' => 'element',
      'file' => 'chunks.field.inc',
    ),
  );

  // Load all chunk types and register corresponding theme hooks.
  $chunk_types = chunk_types_load();
  foreach ($chunk_types as $chunk_type) {
    $theme_hooks['chunks_' . $chunk_type->name . '_chunk'] = array(
      'variables' => $chunk_type->default_configuration,
      'file' => $chunk_type->module . '.chunk_types.inc',
      'path' => drupal_get_path('module', $chunk_type->module),
    );
  }

  return $theme_hooks;
}

/**
 * Preprocess variables for the theme_chunk().
 */
function template_preprocess_chunk(&$variables) {
  $variables['classes_array'] = array('chunk', $variables['chunk']['#chunk_type']->name . '-chunk');
}

/**
 * Theme implementation for a single chunk.
 */
function theme_chunk($variables) {
  $output = '<div class="' . implode(' ', $variables['classes_array']) . '">';
  $output .= $variables['chunk']['#chunk_content'];
  $output .= '</div>';
  return $output;
}

