<?php

/**
 * @file
 *   Main module file for Paragraph Chunk type.
 */

/**
 * Implements hook_chunk_types() to provide a Paragraph chunk.
 */
function chunks_p_chunk_types() {
  return array(
    'p' => array(
      'title' => t('Paragraph'),
      'default configuration' => array(
        'p' => '',
      ),
      'default type settings' => array(
        'edit_in_place' => 0,
      ),
      'client themeable' => TRUE,
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function chunks_p_libraries_info() {
  $libraries = array();
  $libraries['pen'] = array(
    'name' => 'Pen',
    'vendor url' => 'https://github.com/sofish/pen',
    'download url' => 'https://github.com/sofish/pen',
    'version arguments' => array(
      'file' => 'bower.json',
      'pattern' => '@version":\s"+([0-9\.]+)+@',
    ),
    'files' => array(
      'js' => array(
        'src/pen.js',
        'src/markdown.js',
      ),
      'css' => array(
        'src/pen.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_type_settings_form().
 */
function chunks_p_p_chunk_type_settings_form($chunk_instance, $delta, $form, &$form_state) {

  $settings = $chunk_instance['settings'];

  $instance_settings_form = array();

  $instance_settings_form['edit_in_place'] = array(
    '#type' => 'checkbox',
    '#title' => t('Edit paragraphs in-place'),
    '#default_value' => $settings['edit_in_place'],
  );

  $instance_settings_form['edit_in_place']['#description'] = t('This setting requires the libraries module (https://drupal.org/project/libraries) and the pen library (https://github.com/sofish/pen).');
  $instance_settings_form['edit_in_place']['#description'] .= '<br>';
  $instance_settings_form['edit_in_place']['#description'] .= t('<strong>WARNING:</strong> This bypasses Drupal\'s server-side theming and input filtering processes when rendering an editable chunk. Any potential security vulnerability is mitigated by the fact that unfiltered html is only displayed to the user currently editing, and thus supplying the data with which to generate the html.');

  // Do not allow the edit_in_place setting to be configured if the pen library
  // does not exist.
  $library = module_exists('libraries') ? libraries_detect('pen') : array('installed' => FALSE);
  if (!$library['installed']) {
    $instance_settings_form['edit_in_place']['#default_value'] = 0;
    $instance_settings_form['edit_in_place']['#value'] = 0;
    $instance_settings_form['edit_in_place']['#disabled'] = TRUE;
  }

  return $instance_settings_form;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_form().
 */
function chunks_p_p_chunk_form(&$configuration, $chunk_instance, $form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $settings = $chunk_instance['settings'];

  $config_form = array();

  // This field holds the data and interacts with Drupal. It will be hidden if
  // edit_in_place is TRUE.
  $config_form['p'] = array(
    '#type' => 'textarea',
    '#title' => t('Paragraph'),
    '#default_value' => $configuration['p'],
  );

  // This field is the user-facing editor and continually transfers its contents
  // to the p field which is then saved within Drupal.
  if ($settings['edit_in_place']) {

    $library = module_exists('libraries') ? libraries_detect('pen') : array('installed' => FALSE);

    if ($library['installed']) {

      $configuration['edit_in_place'] = TRUE;

      $config_form['editor'] = array(
        '#theme' => 'chunk',
        '#chunk_type' => $form['#chunk_types']['p'],
        '#chunk_configuration' => $configuration,
        '#instance_settings' => $settings,
        '#entity' => $element['#entity'],
        '#entity_type' => $element['#entity_type'],
        '#field_name' => $field['field_name'],
        '#langcode' => $langcode,
        '#delta' => $delta,
        '#preview' => TRUE,
        '#attached' => array(
          'libraries_load' => array(
            array('pen'),
          ),
        ),
      );

      // Attach inline styles for edit-in-place placeholders, but only do it
      // once.
      static $css_attached = FALSE;
      if (!$css_attached) {
        $placeholder_styles = <<<EOT
/* Fallback for when :empty is not supported. */
.p-chunk-type-configuration .p-chunk[contenteditable] {
  border: 1px dashed #ccc;
}
/* Override fallback when :empty is supported. */
.p-chunk-type-configuration .p-chunk[contenteditable]:empty,
.p-chunk-type-configuration .p-chunk[contenteditable]:not(:empty) {
  border: 0;
}
.p-chunk-type-configuration .p-chunk[contenteditable]:empty:after {
  content: 'Enter text here...';
}
.p-chunk-type-configuration .p-chunk[contenteditable]:focus:after {
  content: '';
}
EOT;
        $config_form['editor']['#attached']['css'][] = array('data' => $placeholder_styles, 'type' => 'inline');

        $css_attached = TRUE;
      }

    }
  }

  if ($settings['preview_on_client']) {
    $config_form['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'chunks_p') . '/chunks-p.js',
      ),
    );
  }

  return $config_form;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_is_empty().
 */
function chunks_p_p_chunk_is_empty($configuration, $item, $field) {
  if (empty($configuration['p'])) {
    return TRUE;
  }
  return FALSE;
}
