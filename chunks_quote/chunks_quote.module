<?php

/**
 * @file
 *   Main module file for Quote Chunk type.
 */

/**
 * Implements hook_chunk_types() to provide a Paragraph chunk.
 */
function chunks_quote_chunk_types() {
  return array(
    'quote' => array(
      'title' => t('Quote'),
      'default configuration' => array(
        'quote' => '',
        'attribution' => '',
        'attribution_location' => '',
      ),
      'default type settings' => array(
        'edit_in_place' => 1,
      ),
      'client themeable' => TRUE,
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function chunks_quote_libraries_info() {
  $libraries = array();
  $libraries['pen'] = array(
    'name' => 'Pen',
    'vendor url' => 'https://github.com/sofish/pen',
    'download url' => 'https://github.com/sofish/pen',
    'version arguments' => array(
      'file' => 'bower.json',
      'pattern' => '@version":\s"+([0-9\.]+)+@',
    ),
    'files' => array(
      'js' => array(
        'src/pen.js',
        'src/markdown.js',
      ),
      'css' => array(
        'src/pen.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_type_settings_form().
 */
function chunks_quote_quote_chunk_type_settings_form($field, $settings) {
  $form = array();

  $form['edit_in_place'] = array(
    '#type' => 'checkbox',
    '#title' => t('Edit paragraphs in-place'),
    '#default_value' => $settings['edit_in_place'],
  );

  $form['edit_in_place']['#description'] = t('This setting requires the libraries module (https://drupal.org/project/libraries) and the pen library (https://github.com/sofish/pen).');
  $form['edit_in_place']['#description'] .= '<br>';
  $form['edit_in_place']['#description'] .= t('<strong>WARNING:</strong> This bypasses Drupal\'s server-side theming and input filtering processes when rendering an editable chunk. Any potential security vulnerability is mitigated by the fact that unfiltered html is only displayed to the user currently editing, and thus supplying the data with which to generate the html.');

  // Do not allow the edit_in_place setting to be configured if the pen library
  // does not exist.
  $library = module_exists('libraries') ? libraries_detect('pen') : array('installed' => FALSE);
  if (!$library['installed']) {
    $form['edit_in_place']['#default_value'] = 0;
    $form['edit_in_place']['#value'] = 0;
    $form['edit_in_place']['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_form().
 */
function chunks_quote_quote_chunk_form(&$configuration, $chunk_instance, $form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $settings = $chunk_instance['settings'];

  $config_form = array();

  // These fields hold the data for the quote and attribution. They will be
  // hidden if edit_in_place is TRUE.
  $config_form['quote'] = array(
    '#type' => 'textarea',
    '#title' => t('Quotation'),
    '#default_value' => $configuration['quote'],
  );
  $config_form['attribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Attribution'),
    '#default_value' => $configuration['attribution'],
  );

  // This is the location for the cite attribute on the blockquote element.
  $config_form['attribution_location'] = array(
    '#title' => t('Source URL address'),
    '#type' => 'textfield',
    '#default_value' => $configuration['attribution_location'],
  );

  // This field is the user-facing editor and continually transfers its contents
  // to the p field which is then saved within Drupal.
  if ($settings['edit_in_place']) {

    $library = module_exists('libraries') ? libraries_detect('pen') : array('installed' => FALSE);

    if ($library['installed']) {

      $configuration['edit_in_place'] = TRUE;

      // Provide default values if the configuration is empty so the
      // contenteditable element will be visible on the page.
      $configuration['quote'] = !empty($configuration['quote']) ? $configuration['quote'] : t('Enter the quotation here...');
      $configuration['attribution'] = !empty($configuration['attribution']) ? $configuration['attribution'] : t('Enter attribution here...');

      $config_form['editor'] = array(
        '#theme' => 'chunk',
        '#chunk_type' => $form['#chunk_types']['quote'],
        '#chunk_configuration' => $configuration,
        '#instance_settings' => $settings,
        '#field_name' => $field['field_name'],
        '#langcode' => $langcode,
        '#delta' => $delta,
        '#attached' => array(
          'libraries_load' => array(
            array('pen'),
          ),
        ),
      );

    }
  }

  if ($settings['preview_on_client']) {
    $config_form['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'chunks_quote') . '/chunks-quote.js',
      ),
    );
  }

  return $config_form;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_is_empty().
 */
function chunks_quote_quote_chunk_is_empty($configuration, $item, $field) {
  if (empty($configuration['quote'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_form_validate().
 *
 * This is the source of our dependency on link.module because we're reusing
 * their validation function.
 */
function chunks_quote_quote_chunk_form_validate($configuration, &$form_state, $form) {
  if (trim($configuration['attribution_location']['#value']) != '' &&
    link_validate_url(trim($configuration['attribution_location']['#value'])) == FALSE) {
    form_error($configuration['attribution_location'], t('The URL for your attribution location is not valid.'));
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_preprocess_chunk().
 */
function chunks_quote_preprocess_chunk(&$variables) {
  if ($variables['chunk_type']->name == 'quote') {
    $attribution_location = check_plain(url($variables['configuration']['attribution_location']));
    $variables['cite_attribute'] = !empty($attribution_location) ? ' cite="' . $attribution_location . '"' : '';
  }
}
