<?php

/**
 * @file
 * Provide a list chunk type.
 */

/**
 * Implements hook_chunk_types().
 */
function chunks_list_chunk_types() {
  return array(
    'list' => array(
      'title' => t('List'),
      'default configuration' => array(
        'style' => 'ul',
        'list' => array('Enter list items here...'),
        'edit_in_place' => 0,
      ),
      'default type settings' => array(
        'edit_in_place' => 1,
        'format' => '',
      ),
      'client themeable' => TRUE,
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function chunks_list_libraries_info() {
  $libraries = array();
  $libraries['pen'] = array(
    'name' => 'Pen',
    'vendor url' => 'https://github.com/sofish/pen',
    'download url' => 'https://github.com/sofish/pen',
    'version arguments' => array(
      'file' => 'bower.json',
      'pattern' => '@version":\s"+([0-9\.]+)+@',
    ),
    'files' => array(
      'js' => array(
        'src/pen.js',
        'src/markdown.js',
      ),
      'css' => array(
        'src/pen.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_type_settings_form().
 */
function chunks_list_list_chunk_type_settings_form($field, $settings) {
  $form = array();

  $form['edit_in_place'] = array(
    '#type' => 'checkbox',
    '#title' => t('Edit list items in-place'),
    '#default_value' => $settings['edit_in_place'],
    '#description' => t('This setting requires the libraries module (https://drupal.org/project/libraries) and the pen library (https://github.com/sofish/pen).'),
  );

  // Do not allow the edit_in_place setting to be configured if the pen library
  // does not exist.
  $library = module_exists('libraries') ? libraries_detect('pen') : array('installed' => FALSE);
  if (!$library['installed']) {
    $form['edit_in_place']['#default_value'] = 0;
    $form['edit_in_place']['#value'] = 0;
    $form['edit_in_place']['#disabled'] = TRUE;
  }

  // Only display this setting to users with 'administer filters' permission
  // since we do not limit the available filters to those which the current user
  // has access to.
  if (user_access('administer filters')) {
    $formats = array();
    foreach (filter_formats() as $id => $format) {
      $formats[$id] = $format->name;
    }

    $form['format'] = array(
      '#type' => 'select',
      '#title' => t('Text format'),
      '#options' => $formats,
      // By default $settings['format'] is an empty string so the default value
      // can be derived from the first value of $formats which should be the
      // global default.
      '#default_value' => !empty($settings['format']) ? $settings['format'] : reset($formats),
    );
  }

  return $form;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_is_allowed().
 */
function chunks_list_list_chunk_is_allowed($settings, $field, $instance, $langcode) {
  $format = filter_format_load($settings['format']);
  if (!filter_access($format)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_form().
 */
function chunks_list_list_chunk_form(&$configuration, $settings, $form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $config_form = array();

  $config_form['style'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#default_value' => $configuration['style'],
    '#options' => array(
      'ul' => t('Bulleted'),
      'ol' => t('Numbered'),
    ),
    '#description' => t('Bulleted will wrap items in an %ul element. Numbered will wrap items in an %ol element.', array('%ul' => '<ul></ul>', '%ol' => '<ol></ol>')),
  );

  $format = filter_format_load($settings['format']);

  $list_description = t('Enter list items. Each new line is a new item filtered with the %format text format. Empty lines will be discarded.', array('%format' => $format->name));
  $list_description .= theme('filter_guidelines', array('format' => $format));

  $config_form['list'] = array(
    '#type' => 'textarea',
    '#title' => t('List items'),
    '#default_value' => $configuration['list'],
    '#value_callback' => 'chunks_list_text_to_items',
    '#after_build' => array('chunks_list_items_to_text'),
    '#format' => $settings['format'],
    '#description' =>  $list_description,
  );

  // Only allow the edit-in-place functionality if we can load the pen library
  // and edit_in_place is TRUE.
  if ($settings['edit_in_place']) {

    $library = module_exists('libraries') ? libraries_detect('pen') : array('installed' => FALSE);

    if ($library['installed']) {

      $configuration['edit_in_place'] = TRUE;

      $config_form['inplace_items'] = array(
        '#theme' => 'chunk',
        '#chunk_type' => $form['#chunk_types']['list'],
        '#chunk_configuration' => $configuration,
        '#type_settings' => $settings,
        '#field_name' => $field['field_name'],
        '#langcode' => $langcode,
        '#delta' => $delta,
        '#after_build' => array('chunks_list_fill_inplace_items'),
        '#attached' => array(
          'libraries_load' => array(
            array('pen'),
          ),
          'js' => array(
            drupal_get_path('module', 'chunks_list') . '/chunks-list.js',
          ),
        ),
      );
    }
  }

  if ($settings['preview_on_client']) {
    $config_form['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'chunks_list'). '/chunks-list.js',
      ),
    );
  }

  return $config_form;
}

/**
 * #value_callback for the "list" textarea.
 *
 * Breaks one string into an array of list items.
 */
function chunks_list_text_to_items($element, $input = FALSE, $form_state) {
  $return = array();
  $items = $input !== FALSE ? $input : $element['#default_value'];

  if (is_string($items)) {
    $items = explode("\n", $items);
  }

  // Trim items and add them to the return array if they contain data.
  // '<p><br></p>' is the markup output by Pen when a line is empty.
  foreach ($items as $key => $list_item) {
    $list_item = trim($list_item);
    if (!empty($list_item) && $list_item !== '<p><br></p>') {
      $return[] = $list_item;
    }
  }

  return $return;
}

/**
 * #after_build handler for the "list" textarea.
 *
 * Turns an array of items back to text.
 */
function chunks_list_items_to_text($element) {
  $element['#default_value'] = implode("\n", $element['#default_value']);
  $element['#value'] = implode("\n", $element['#value']);
  return $element;
}

/**
 * #after_build handler for the "inline_list" contenteditable element.
 *
 * Fills contenteditable list items with correct values.
 */
function chunks_list_fill_inplace_items($element) {
  if (isset($form_state['input'])) {
    $input = drupal_array_get_nested_value($form_state['input'], array_slice($element['#array_parents'], 0, -1));
    $element['#chunk_configuration']['list'] = implode("\n", $input);
  }
  return $element;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_form_validate().
 */
function chunks_list_list_chunk_form_validate($configuration, &$form_state, $form) {
  // This should never happen because the chunk type should not be displayed to
  // users who do not have access to the filter format. Still, let's be safe.
  $format = filter_format_load($configuration['list']['#format']);

  if (!filter_access($format)) {
    form_error($configuration['list'], t('You do not have permission to use the %format text format, which this instance of the list chunk type requires.', array('%format' => $format->format)));
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_is_empty().
 */
function chunks_list_list_chunk_is_empty($configuration, $item, $field) {
  // If any list item contains data, this chunk is not empty.
  foreach ($configuration['list'] as $list_item) {
    if (!empty($list_item)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_presave().
 */
function chunks_list_list_chunk_presave(&$item) {
  // Don't save any empty list items.
  $list_items = $item['data']['configuration']['list'];
  foreach ($list_items as $key => $list_item) {
    if (empty($list_item)) {
      unset($item['data']['configuration']['items'][$key]);
    }
  }
}

/**
 * Implements hook_preprocess_chunk().
 */
function chunks_list_preprocess_chunk(&$variables) {
  if ($variables['chunk_type']->name == 'list') {

    $config = $variables['configuration'];

    // Do not show empty list items.
    foreach ($config['list'] as $key => $item) {
      if (empty($item)) {
        unset($variables['configuration']['list'][$key]);
      }
    }
  }
}
