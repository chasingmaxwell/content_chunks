<?php

/**
 * @file
 * Provide an image chunk type.
 */

/**
 * Implements hook_chunk_types().
 */
function chunks_image_chunk_types() {
  return array(
    'image' => array(
      'title' => t('Image'),
      'default configuration' => array(
        'image' => array(
          'fid' => 0,
          'alt' => '',
          'title' => '',
        ),
        'image_style' => '',
        'image_link' => '',
        // @TODO: I'm not sure if we need these two properties, but they exist
        // in image_field_schema() so I thought I'd be safe and provide them.
        // Figure out if they should be removed.
        'width' => 0,
        'height' => 0,
      ),
      'default type settings' => array(
        'field' => array(),
        'instance' => array(),
        'widget' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_CHUNK_TYPE_chunk_type_settings_form().
 */
function chunks_image_image_chunk_type_settings_form($field, $settings) {
  $form = array();

  // Get real defaults. We can't do this in chunks_image_chunk_types() because
  // the image field info settings aren't ready yet at that point.
  $settings['field'] = !empty($settings['field']) ? $settings['field'] : field_info_field_settings('image');
  $settings['instance'] = !empty($settings['instance']) ? $settings['instance'] : field_info_instance_settings('image');
  $settings['widget'] = !empty($settings['widget']) ? $settings['widget'] : field_info_widget_settings('image_image');

  // Create fake field and instance arrays with just enough information to
  // retrieve image field, instance, and widget settings forms.
  $image_field = array(
    'type' => 'image',
    'settings' => $settings['field'],
  );
  $image_instance = array(
    'settings' => $settings['instance'],
    'widget' => array(
      'settings' => $settings['widget'],
    ),
  );

  // Embed settings forms for the image field.
  $form['field'] = image_field_settings_form($image_field, $image_instance);
  $form['instance'] = image_field_instance_settings_form($image_field, $image_instance);
  $form['widget'] = image_field_widget_settings_form($image_field, $image_instance);

  // Hide default_image from field settings since we get a duplicate in
  // instance settings.
  $form['field']['default_image']['#access'] = FALSE;

  // Hide preview_image_style from widget settings since we have our own
  // chunky preview functionality.
  $form['widget']['preview_image_style']['#access'] = FALSE;

  return $form;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_form().
 */
function chunks_image_image_chunk_form($form, &$form_state, &$configuration, $settings) {
  $config_form = array();

  // Create fake field and instance arrays with just enough information to
  // utilize some functions provided by the image and file field
  // implementations.
  $image_field = array(
    'type' => 'image',
    'settings' => $settings['field'],
  );
  $image_instance = array(
    'settings' => $settings['instance'],
    'widget' => array(
      'settings' => $settings['widget'],
    ),
  );

  // Build the image upload widget.
  $element_info = element_info('managed_file');
  $config_form['image'] = array(
    '#type' => 'managed_file',
    '#title' => t('Image'),
    '#upload_location' => file_field_widget_uri($image_field, $image_instance),
    '#upload_validators' => file_field_widget_upload_validators($image_field, $image_instance),
    '#value_callback' => 'chunks_image_widget_value',
    '#process' => array_merge($element_info['#process'], array('chunks_image_widget_process')),
    '#progress_indicator' => $image_instance['widget']['settings']['progress_indicator'],
    '#extended' => TRUE,
    '#default_value' => array(
      'fid' => $configuration['image']['fid'],
      'alt' => $configuration['image']['alt'],
      'title' => $configuration['image']['title'],
      'display' => 0,
      'description' => '',
    ),
    '#image_field_data' => array(
      'image_field' => $image_field,
      'image_instance' => $image_instance,
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'chunks_image') . '/chunks-image.js',
      ),
    ),
  );

  // Add field description.
  $config_form['image']['#description'] = theme('file_upload_help', array('upload_validators' => $config_form['image']['#upload_validators']));

  // Add upload resolution validation.
  if ($settings['instance']['max_resolution'] || $settings['instance']['min_resolution']) {
    $config_form['image']['#upload_validators']['file_validate_image_resolution'] = array($settings['instance']['max_resolution'], $settings['instance']['min_resolution']);
  }

  // If not using custom extension validation, ensure this is an image.
  // NOTE: Client-side extension validation does not display a message correctly
  // once an image has been removed from a managed_file widget. This is a known
  // issue in the file module. You can find a patch for Drupal 7 here:
  // https://drupal.org/node/1074214#comment-8777683.
  $supported_extensions = array('png', 'gif', 'jpg', 'jpeg');
  $extensions = isset($config_form['image']['#upload_validators']['file_validate_extensions'][0]) ? $config_form['image']['#upload_validators']['file_validate_extensions'][0] : implode(' ', $supported_extensions);
  $extensions = array_intersect(explode(' ', $extensions), $supported_extensions);
  $config_form['image']['#upload_validators']['file_validate_extensions'][0] = implode(' ', $extensions);

  // Provide some additional display settings.
  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $config_form['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $configuration['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#description' => t('Select the image style which should be applied to the image when displayed.'),
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $config_form['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $configuration['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
    '#description' => t('Select a location to which the imaage should be linked.'),
  );

  return $config_form;
}

/**
 * Implements hook_CHUNK_TYPE_chunk_is_empty().
 */
function chunks_image_image_chunk_is_empty($configuration, $item, $field) {
  return empty($configuration['image']['fid']);
}

/**
 * An element #process callback for managed_file element inside the image chunk
 * form.
 *
 * @see chunks_image_image_chunk_form()
 */
function chunks_image_widget_process($element, &$form_state, $form) {
  $item = $element['#value'];
  $item['fid'] = $element['fid']['#value'];

  $image_field_data = $element['#image_field_data'];
  $field = $image_field_data['image_field'];
  $instance = $image_field_data['image_instance'];
  $settings = $instance['widget']['settings'];

  $element['#theme'] = 'image_widget';
  $element['#attached']['css'][] = drupal_get_path('module', 'image') . '/image.css';

  $element['upload_button']['#limit_validation_errors'] = array(array_slice($element['#parents'], 0, -1));

  // Add the additional alt and title fields.
  $element['alt'] = array(
    '#title' => t('Alternate text'),
    '#type' => 'textfield',
    '#default_value' => isset($item['alt']) ? $item['alt'] : '',
    '#description' => t('This text will be used by screen readers, search engines, or when the image cannot be loaded.'),
    // @see http://www.gawds.org/show.php?contentid=28
    '#maxlength' => 512,
    '#weight' => -2,
    '#access' => (bool) $item['fid'] && $instance['settings']['alt_field'],
  );
  $element['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($item['title']) ? $item['title'] : '',
    '#description' => t('The title is used as a tool tip when the user hovers the mouse over the image.'),
    '#maxlength' => 1024,
    '#weight' => -1,
    '#access' => (bool) $item['fid'] && $instance['settings']['title_field'],
  );

  return $element;
}

/**
 * The #value_callback for the managed_file element inside the image chunk form.
 *
 * @see chunks_image_image_chunk_form()
 */
function chunks_image_widget_value($element, $input = FALSE, $form_state) {

  // We depend on the managed file element to handle uploads.
  $return = file_managed_file_value($element, $input, $form_state);

  // Ensure that all the required properties are returned even if empty.
  $return += array(
    'fid' => 0,
    'display' => 0,
    'description' => '',
  );

  return $return;
}

/**
 * Implements hook_preprocess_chunk().
 *
 * Preprocess variables for chunk--image.tpl.php.
 *
 * @see template_preprocess_chunk()
 * @see chunk--image.tpl.php
 */
function chunks_image_preprocess_chunk(&$variables, $hook) {
  if ($variables['chunk_type']->name == 'image') {

    $config = $variables['configuration'];
    $type_settings = $variables['type_settings'];

    // Retrive the file id either from the uploaded image or the default.
    if ($config['image']['fid']) {
      $fid = $config['image']['fid'];
    }
    else {
      $fid = $type_settings['instance']['default_image'];
    }

    // If we have either an uploaded image or a default image, theme it.
    if ($fid) {
      $file = file_load($fid);

      $item = array_merge((array) $file, $config['image']);

      if ($config['image_link'] == 'content' && $variables['entity'] && $variables['entity_type']) {
        $uri = entity_uri($variables['entity_type'], $variables['entity']);
      }
      elseif ($config['image_link'] == 'file') {
        $uri = array(
          'path' => file_create_url($file->uri),
          'options' => array(),
        );
      }

      $variables['image'] = array(
        '#theme' => 'image_formatter',
        '#item' => $item,
        '#image_style' => $config['image_style'],
        '#path' => isset($uri) ? $uri : '',
      );
    }
    // Provide a message for the chunks widget if an empty image chunk is
    // previewed and there is no default.
    else {
      $variables['image'] = array(
        '#markup' => t('No image was uploaded and no default set. This image will not be saved.'),
      );
    }
  }
}
